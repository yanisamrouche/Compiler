/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ALDeclarationVarLDeclarationVar extends PLDeclarationVar
{
    private PVarDeclaration _varDeclaration_;
    private PLDeclarationVarB _lDeclarationVarB_;

    public ALDeclarationVarLDeclarationVar()
    {
        // Constructor
    }

    public ALDeclarationVarLDeclarationVar(
        @SuppressWarnings("hiding") PVarDeclaration _varDeclaration_,
        @SuppressWarnings("hiding") PLDeclarationVarB _lDeclarationVarB_)
    {
        // Constructor
        setVarDeclaration(_varDeclaration_);

        setLDeclarationVarB(_lDeclarationVarB_);

    }

    @Override
    public Object clone()
    {
        return new ALDeclarationVarLDeclarationVar(
            cloneNode(this._varDeclaration_),
            cloneNode(this._lDeclarationVarB_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALDeclarationVarLDeclarationVar(this);
    }

    public PVarDeclaration getVarDeclaration()
    {
        return this._varDeclaration_;
    }

    public void setVarDeclaration(PVarDeclaration node)
    {
        if(this._varDeclaration_ != null)
        {
            this._varDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varDeclaration_ = node;
    }

    public PLDeclarationVarB getLDeclarationVarB()
    {
        return this._lDeclarationVarB_;
    }

    public void setLDeclarationVarB(PLDeclarationVarB node)
    {
        if(this._lDeclarationVarB_ != null)
        {
            this._lDeclarationVarB_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lDeclarationVarB_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varDeclaration_)
            + toString(this._lDeclarationVarB_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varDeclaration_ == child)
        {
            this._varDeclaration_ = null;
            return;
        }

        if(this._lDeclarationVarB_ == child)
        {
            this._lDeclarationVarB_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varDeclaration_ == oldChild)
        {
            setVarDeclaration((PVarDeclaration) newChild);
            return;
        }

        if(this._lDeclarationVarB_ == oldChild)
        {
            setLDeclarationVarB((PLDeclarationVarB) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
