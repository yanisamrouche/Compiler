/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionDec extends PFunctionDec
{
    private TId _id_;
    private TLPar _lPar_;
    private PLDeclarationVar _lDeclarationVar_;
    private TRPar _rPar_;
    private PLDeclarationVarBOpt _lDeclarationVarBOpt_;
    private PIblock _iblock_;

    public AFunctionDec()
    {
        // Constructor
    }

    public AFunctionDec(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PLDeclarationVar _lDeclarationVar_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") PLDeclarationVarBOpt _lDeclarationVarBOpt_,
        @SuppressWarnings("hiding") PIblock _iblock_)
    {
        // Constructor
        setId(_id_);

        setLPar(_lPar_);

        setLDeclarationVar(_lDeclarationVar_);

        setRPar(_rPar_);

        setLDeclarationVarBOpt(_lDeclarationVarBOpt_);

        setIblock(_iblock_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionDec(
            cloneNode(this._id_),
            cloneNode(this._lPar_),
            cloneNode(this._lDeclarationVar_),
            cloneNode(this._rPar_),
            cloneNode(this._lDeclarationVarBOpt_),
            cloneNode(this._iblock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionDec(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PLDeclarationVar getLDeclarationVar()
    {
        return this._lDeclarationVar_;
    }

    public void setLDeclarationVar(PLDeclarationVar node)
    {
        if(this._lDeclarationVar_ != null)
        {
            this._lDeclarationVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lDeclarationVar_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public PLDeclarationVarBOpt getLDeclarationVarBOpt()
    {
        return this._lDeclarationVarBOpt_;
    }

    public void setLDeclarationVarBOpt(PLDeclarationVarBOpt node)
    {
        if(this._lDeclarationVarBOpt_ != null)
        {
            this._lDeclarationVarBOpt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lDeclarationVarBOpt_ = node;
    }

    public PIblock getIblock()
    {
        return this._iblock_;
    }

    public void setIblock(PIblock node)
    {
        if(this._iblock_ != null)
        {
            this._iblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iblock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._lPar_)
            + toString(this._lDeclarationVar_)
            + toString(this._rPar_)
            + toString(this._lDeclarationVarBOpt_)
            + toString(this._iblock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._lDeclarationVar_ == child)
        {
            this._lDeclarationVar_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._lDeclarationVarBOpt_ == child)
        {
            this._lDeclarationVarBOpt_ = null;
            return;
        }

        if(this._iblock_ == child)
        {
            this._iblock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._lDeclarationVar_ == oldChild)
        {
            setLDeclarationVar((PLDeclarationVar) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._lDeclarationVarBOpt_ == oldChild)
        {
            setLDeclarationVarBOpt((PLDeclarationVarBOpt) newChild);
            return;
        }

        if(this._iblock_ == oldChild)
        {
            setIblock((PIblock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
