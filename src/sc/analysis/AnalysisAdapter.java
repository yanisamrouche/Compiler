/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALFunctionDecLFunctionDec(ALFunctionDecLFunctionDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon6LFunctionDec(AEpsilon6LFunctionDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDec(AFunctionDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALDeclarationVarBOptLDeclarationVarBOpt(ALDeclarationVarBOptLDeclarationVarBOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon5LDeclarationVarBOpt(AEpsilon5LDeclarationVarBOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALDeclarationVarLDeclarationVar(ALDeclarationVarLDeclarationVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon4LDeclarationVar(AEpsilon4LDeclarationVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALDeclarationVarBLDeclarationVarB(ALDeclarationVarBLDeclarationVarB node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon7LDeclarationVarB(AEpsilon7LDeclarationVarB node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDeclarationVarDeclaration(AVarDeclarationVarDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOVarVar(AOVarVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATabVarVar(ATabVarVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALInstLInst(ALInstLInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon1LInst(AEpsilon1LInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIwriteInst(AIwriteInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIreadInst(AIreadInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIaffectationInst(AIaffectationInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIcallFunctionInst(AIcallFunctionInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIwhileInst(AIwhileInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIreturnInst(AIreturnInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIifInst(AIifInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIwrite(AIwrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIread(AIread node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIaffectation(AIaffectation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIcallFunction(AIcallFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallFunction(ACallFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIwhile(AIwhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIreturn(AIreturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfIif(AIfIif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseIelse(AElseIelse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon0Ielse(AEpsilon0Ielse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIblock(AIblock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALExprLExpr(ALExprLExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon2LExpr(AEpsilon2LExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALExprBLExprB(ALExprBLExprB node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilon3LExprB(AEpsilon3LExprB node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr1Expr(AExpr1Expr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpr1(AAndExpr1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr2Expr1(AExpr2Expr1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualExpr2(AEqualExpr2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExpr2(AInfExpr2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr3Expr2(AExpr3Expr2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpr3(APlusExpr3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpr3(AMinusExpr3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr4Expr3(AExpr4Expr3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExpr4(AMultExpr4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpr4(ADivExpr4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr5Expr4(AExpr5Expr4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpr5(ANotExpr5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr6Expr5(AExpr6Expr5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParExpr6(AParExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExpr6(ANumberExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExpr6(AVarExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallFunctionExpr6(ACallFunctionExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadExpr6(AReadExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInf(TInf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrack(TLBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrack(TRBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBar(TLBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBar(TRBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWrite(TWrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEps(TEps node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVrg(TVrg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
