/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ALFunctionDecLFunctionDec */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AEpsilon6LFunctionDec */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AFunctionDec */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ALDeclarationVarBOptLDeclarationVarBOpt */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AEpsilon5LDeclarationVarBOpt */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ALDeclarationVarLDeclarationVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AEpsilon4LDeclarationVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ALDeclarationVarBLDeclarationVarB */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce AEpsilon7LDeclarationVarB */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AIntType */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AOVarVar */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce ATabVarVar */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AVarDeclarationVarDeclaration */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce ALInstLInst */
            {
                ArrayList<Object> list = new14();
                push(goTo(9), list, false);
            }
            break;
            case 15: /* reduce AEpsilon1LInst */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list, false);
            }
            break;
            case 16: /* reduce AIwriteInst */
            {
                ArrayList<Object> list = new16();
                push(goTo(10), list, false);
            }
            break;
            case 17: /* reduce AIreadInst */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list, false);
            }
            break;
            case 18: /* reduce AIblockInst */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AIaffectationInst */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AIcallFunctionInst */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AIwhileInst */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AIreturnInst */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AIifInst */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce AIwrite */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AIread */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AIaffectation */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce AIcallFunction */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list, false);
            }
            break;
            case 28: /* reduce ACallFunction */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce AIwhile */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce AIreturn */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, false);
            }
            break;
            case 31: /* reduce AIfIif */
            {
                ArrayList<Object> list = new31();
                push(goTo(18), list, false);
            }
            break;
            case 32: /* reduce AElseIelse */
            {
                ArrayList<Object> list = new32();
                push(goTo(19), list, false);
            }
            break;
            case 33: /* reduce AEpsilon0Ielse */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list, false);
            }
            break;
            case 34: /* reduce AIblock */
            {
                ArrayList<Object> list = new34();
                push(goTo(20), list, false);
            }
            break;
            case 35: /* reduce ALExprLExpr */
            {
                ArrayList<Object> list = new35();
                push(goTo(21), list, false);
            }
            break;
            case 36: /* reduce AEpsilon2LExpr */
            {
                ArrayList<Object> list = new36();
                push(goTo(21), list, false);
            }
            break;
            case 37: /* reduce ALExprBLExprB */
            {
                ArrayList<Object> list = new37();
                push(goTo(22), list, false);
            }
            break;
            case 38: /* reduce AEpsilon3LExprB */
            {
                ArrayList<Object> list = new38();
                push(goTo(22), list, false);
            }
            break;
            case 39: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new39();
                push(goTo(23), list, false);
            }
            break;
            case 40: /* reduce AExpr1Expr */
            {
                ArrayList<Object> list = new40();
                push(goTo(23), list, false);
            }
            break;
            case 41: /* reduce AAndExpr1 */
            {
                ArrayList<Object> list = new41();
                push(goTo(24), list, false);
            }
            break;
            case 42: /* reduce AExpr2Expr1 */
            {
                ArrayList<Object> list = new42();
                push(goTo(24), list, false);
            }
            break;
            case 43: /* reduce AEqualExpr2 */
            {
                ArrayList<Object> list = new43();
                push(goTo(25), list, false);
            }
            break;
            case 44: /* reduce AInfExpr2 */
            {
                ArrayList<Object> list = new44();
                push(goTo(25), list, false);
            }
            break;
            case 45: /* reduce AExpr3Expr2 */
            {
                ArrayList<Object> list = new45();
                push(goTo(25), list, false);
            }
            break;
            case 46: /* reduce APlusExpr3 */
            {
                ArrayList<Object> list = new46();
                push(goTo(26), list, false);
            }
            break;
            case 47: /* reduce AMinusExpr3 */
            {
                ArrayList<Object> list = new47();
                push(goTo(26), list, false);
            }
            break;
            case 48: /* reduce AExpr4Expr3 */
            {
                ArrayList<Object> list = new48();
                push(goTo(26), list, false);
            }
            break;
            case 49: /* reduce AMultExpr4 */
            {
                ArrayList<Object> list = new49();
                push(goTo(27), list, false);
            }
            break;
            case 50: /* reduce ADivExpr4 */
            {
                ArrayList<Object> list = new50();
                push(goTo(27), list, false);
            }
            break;
            case 51: /* reduce AModExpr4 */
            {
                ArrayList<Object> list = new51();
                push(goTo(27), list, false);
            }
            break;
            case 52: /* reduce AExpr5Expr4 */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list, false);
            }
            break;
            case 53: /* reduce ANotExpr5 */
            {
                ArrayList<Object> list = new53();
                push(goTo(28), list, false);
            }
            break;
            case 54: /* reduce AExpr6Expr5 */
            {
                ArrayList<Object> list = new54();
                push(goTo(28), list, false);
            }
            break;
            case 55: /* reduce AParExpr6 */
            {
                ArrayList<Object> list = new55();
                push(goTo(29), list, false);
            }
            break;
            case 56: /* reduce ANumberExpr6 */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list, false);
            }
            break;
            case 57: /* reduce AVarExpr6 */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list, false);
            }
            break;
            case 58: /* reduce ACallFunctionExpr6 */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, false);
            }
            break;
            case 59: /* reduce AReadExpr6 */
            {
                ArrayList<Object> list = new59();
                push(goTo(29), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLDeclarationVarBOpt pldeclarationvarboptNode2;
        PLFunctionDec plfunctiondecNode3;
        pldeclarationvarboptNode2 = (PLDeclarationVarBOpt)nodeArrayList1.get(0);
        plfunctiondecNode3 = (PLFunctionDec)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(pldeclarationvarboptNode2, plfunctiondecNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ALFunctionDecLFunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLFunctionDec plfunctiondecNode1;
        {
            // Block
        PFunctionDec pfunctiondecNode2;
        PLFunctionDec plfunctiondecNode3;
        pfunctiondecNode2 = (PFunctionDec)nodeArrayList1.get(0);
        plfunctiondecNode3 = (PLFunctionDec)nodeArrayList2.get(0);

        plfunctiondecNode1 = new ALFunctionDecLFunctionDec(pfunctiondecNode2, plfunctiondecNode3);
        }
	nodeList.add(plfunctiondecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEpsilon6LFunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLFunctionDec plfunctiondecNode1;
        {
            // Block

        plfunctiondecNode1 = new AEpsilon6LFunctionDec();
        }
	nodeList.add(plfunctiondecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDec pfunctiondecNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PLDeclarationVar pldeclarationvarNode4;
        TRPar trparNode5;
        PLDeclarationVarBOpt pldeclarationvarboptNode6;
        PIblock piblockNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pldeclarationvarNode4 = (PLDeclarationVar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pldeclarationvarboptNode6 = (PLDeclarationVarBOpt)nodeArrayList5.get(0);
        piblockNode7 = (PIblock)nodeArrayList6.get(0);

        pfunctiondecNode1 = new AFunctionDec(tidNode2, tlparNode3, pldeclarationvarNode4, trparNode5, pldeclarationvarboptNode6, piblockNode7);
        }
	nodeList.add(pfunctiondecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ALDeclarationVarBOptLDeclarationVarBOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDeclarationVarBOpt pldeclarationvarboptNode1;
        {
            // Block
        PLDeclarationVar pldeclarationvarNode2;
        TSemicolon tsemicolonNode3;
        pldeclarationvarNode2 = (PLDeclarationVar)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pldeclarationvarboptNode1 = new ALDeclarationVarBOptLDeclarationVarBOpt(pldeclarationvarNode2, tsemicolonNode3);
        }
	nodeList.add(pldeclarationvarboptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEpsilon5LDeclarationVarBOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLDeclarationVarBOpt pldeclarationvarboptNode1;
        {
            // Block

        pldeclarationvarboptNode1 = new AEpsilon5LDeclarationVarBOpt();
        }
	nodeList.add(pldeclarationvarboptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ALDeclarationVarLDeclarationVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDeclarationVar pldeclarationvarNode1;
        {
            // Block
        PVarDeclaration pvardeclarationNode2;
        PLDeclarationVarB pldeclarationvarbNode3;
        pvardeclarationNode2 = (PVarDeclaration)nodeArrayList1.get(0);
        pldeclarationvarbNode3 = (PLDeclarationVarB)nodeArrayList2.get(0);

        pldeclarationvarNode1 = new ALDeclarationVarLDeclarationVar(pvardeclarationNode2, pldeclarationvarbNode3);
        }
	nodeList.add(pldeclarationvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEpsilon4LDeclarationVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLDeclarationVar pldeclarationvarNode1;
        {
            // Block

        pldeclarationvarNode1 = new AEpsilon4LDeclarationVar();
        }
	nodeList.add(pldeclarationvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALDeclarationVarBLDeclarationVarB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLDeclarationVarB pldeclarationvarbNode1;
        {
            // Block
        TVrg tvrgNode2;
        PVarDeclaration pvardeclarationNode3;
        PLDeclarationVarB pldeclarationvarbNode4;
        tvrgNode2 = (TVrg)nodeArrayList1.get(0);
        pvardeclarationNode3 = (PVarDeclaration)nodeArrayList2.get(0);
        pldeclarationvarbNode4 = (PLDeclarationVarB)nodeArrayList3.get(0);

        pldeclarationvarbNode1 = new ALDeclarationVarBLDeclarationVarB(tvrgNode2, pvardeclarationNode3, pldeclarationvarbNode4);
        }
	nodeList.add(pldeclarationvarbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AEpsilon7LDeclarationVarB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLDeclarationVarB pldeclarationvarbNode1;
        {
            // Block

        pldeclarationvarbNode1 = new AEpsilon7LDeclarationVarB();
        }
	nodeList.add(pldeclarationvarbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AOVarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AOVarVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATabVarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLBar tlbarNode3;
        PExpr pexprNode4;
        TRBar trbarNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbarNode3 = (TLBar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbarNode5 = (TRBar)nodeArrayList4.get(0);

        pvarNode1 = new ATabVarVar(tidNode2, tlbarNode3, pexprNode4, trbarNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVarDeclarationVarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        PVar pvarNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pvardeclarationNode1 = new AVarDeclarationVarDeclaration(ptypeNode2, pvarNode3);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ALInstLInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLInst plinstNode1;
        {
            // Block
        PInst pinstNode2;
        PLInst plinstNode3;
        pinstNode2 = (PInst)nodeArrayList1.get(0);
        plinstNode3 = (PLInst)nodeArrayList2.get(0);

        plinstNode1 = new ALInstLInst(pinstNode2, plinstNode3);
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AEpsilon1LInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLInst plinstNode1;
        {
            // Block

        plinstNode1 = new AEpsilon1LInst();
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIwriteInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIwrite piwriteNode2;
        piwriteNode2 = (PIwrite)nodeArrayList1.get(0);

        pinstNode1 = new AIwriteInst(piwriteNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIreadInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIread pireadNode2;
        pireadNode2 = (PIread)nodeArrayList1.get(0);

        pinstNode1 = new AIreadInst(pireadNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AIblockInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIblock piblockNode2;
        piblockNode2 = (PIblock)nodeArrayList1.get(0);

        pinstNode1 = new AIblockInst(piblockNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIaffectationInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIaffectation piaffectationNode2;
        piaffectationNode2 = (PIaffectation)nodeArrayList1.get(0);

        pinstNode1 = new AIaffectationInst(piaffectationNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AIcallFunctionInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIcallFunction picallfunctionNode2;
        picallfunctionNode2 = (PIcallFunction)nodeArrayList1.get(0);

        pinstNode1 = new AIcallFunctionInst(picallfunctionNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIwhileInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIwhile piwhileNode2;
        piwhileNode2 = (PIwhile)nodeArrayList1.get(0);

        pinstNode1 = new AIwhileInst(piwhileNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIreturnInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIreturn pireturnNode2;
        pireturnNode2 = (PIreturn)nodeArrayList1.get(0);

        pinstNode1 = new AIreturnInst(pireturnNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIifInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PIif piifNode2;
        piifNode2 = (PIif)nodeArrayList1.get(0);

        pinstNode1 = new AIifInst(piifNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIwrite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIwrite piwriteNode1;
        {
            // Block
        TWrite twriteNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        piwriteNode1 = new AIwrite(twriteNode2, tlparNode3, pexprNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(piwriteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIread */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIread pireadNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        TSemicolon tsemicolonNode5;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pireadNode1 = new AIread(treadNode2, tlparNode3, trparNode4, tsemicolonNode5);
        }
	nodeList.add(pireadNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AIaffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIaffectation piaffectationNode1;
        {
            // Block
        PVar pvarNode2;
        TEqual tequalNode3;
        PExpr pexprNode4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        piaffectationNode1 = new AIaffectation(pvarNode2, tequalNode3, pexprNode4, tsemicolonNode5);
        }
	nodeList.add(piaffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIcallFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIcallFunction picallfunctionNode1;
        {
            // Block
        PCallFunction pcallfunctionNode2;
        TSemicolon tsemicolonNode3;
        pcallfunctionNode2 = (PCallFunction)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        picallfunctionNode1 = new AIcallFunction(pcallfunctionNode2, tsemicolonNode3);
        }
	nodeList.add(picallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACallFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallFunction pcallfunctionNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PLExpr plexprNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plexprNode4 = (PLExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pcallfunctionNode1 = new ACallFunction(tidNode2, tlparNode3, plexprNode4, trparNode5);
        }
	nodeList.add(pcallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIwhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIwhile piwhileNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpr pexprNode4;
        TRPar trparNode5;
        TDo tdoNode6;
        PIblock piblockNode7;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tdoNode6 = (TDo)nodeArrayList5.get(0);
        piblockNode7 = (PIblock)nodeArrayList6.get(0);

        piwhileNode1 = new AIwhile(twhileNode2, tlparNode3, pexprNode4, trparNode5, tdoNode6, piblockNode7);
        }
	nodeList.add(piwhileNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AIreturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIreturn pireturnNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pireturnNode1 = new AIreturn(treturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(pireturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIfIif */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIif piifNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        PIblock piblockNode5;
        PIelse pielseNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        piblockNode5 = (PIblock)nodeArrayList4.get(0);
        pielseNode6 = (PIelse)nodeArrayList5.get(0);

        piifNode1 = new AIfIif(tifNode2, pexprNode3, tthenNode4, piblockNode5, pielseNode6);
        }
	nodeList.add(piifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AElseIelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIelse pielseNode1;
        {
            // Block
        TElse telseNode2;
        PIblock piblockNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        piblockNode3 = (PIblock)nodeArrayList2.get(0);

        pielseNode1 = new AElseIelse(telseNode2, piblockNode3);
        }
	nodeList.add(pielseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEpsilon0Ielse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PIelse pielseNode1;
        {
            // Block

        pielseNode1 = new AEpsilon0Ielse();
        }
	nodeList.add(pielseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIblock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIblock piblockNode1;
        {
            // Block
        TLBrack tlbrackNode2;
        PLInst plinstNode3;
        TRBrack trbrackNode4;
        tlbrackNode2 = (TLBrack)nodeArrayList1.get(0);
        plinstNode3 = (PLInst)nodeArrayList2.get(0);
        trbrackNode4 = (TRBrack)nodeArrayList3.get(0);

        piblockNode1 = new AIblock(tlbrackNode2, plinstNode3, trbrackNode4);
        }
	nodeList.add(piblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ALExprLExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLExpr plexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PLExprB plexprbNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        plexprbNode3 = (PLExprB)nodeArrayList2.get(0);

        plexprNode1 = new ALExprLExpr(pexprNode2, plexprbNode3);
        }
	nodeList.add(plexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEpsilon2LExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLExpr plexprNode1;
        {
            // Block

        plexprNode1 = new AEpsilon2LExpr();
        }
	nodeList.add(plexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALExprBLExprB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLExprB plexprbNode1;
        {
            // Block
        TVrg tvrgNode2;
        PExpr pexprNode3;
        PLExprB plexprbNode4;
        tvrgNode2 = (TVrg)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        plexprbNode4 = (PLExprB)nodeArrayList3.get(0);

        plexprbNode1 = new ALExprBLExprB(tvrgNode2, pexprNode3, plexprbNode4);
        }
	nodeList.add(plexprbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEpsilon3LExprB */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLExprB plexprbNode1;
        {
            // Block

        plexprbNode1 = new AEpsilon3LExprB();
        }
	nodeList.add(plexprbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOr torNode3;
        PExpr1 pexpr1Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpr1Node4 = (PExpr1)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, torNode3, pexpr1Node4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr1 pexpr1Node2;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);

        pexprNode1 = new AExpr1Expr(pexpr1Node2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAndExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr1 pexpr1Node2;
        TAnd tandNode3;
        PExpr2 pexpr2Node4;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexpr1Node1 = new AAndExpr1(pexpr1Node2, tandNode3, pexpr2Node4);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpr2Expr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexpr1Node1 = new AExpr2Expr1(pexpr2Node2);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEqualExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TEqual tequalNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AEqualExpr2(pexpr2Node2, tequalNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AInfExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TInf tinfNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AInfExpr2(pexpr2Node2, tinfNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new AExpr3Expr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce APlusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TPlus tplusNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new APlusExpr3(pexpr3Node2, tplusNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMinusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TMinus tminusNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AMinusExpr3(pexpr3Node2, tminusNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExpr4Expr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new AExpr4Expr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMultExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TMult tmultNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AMultExpr4(pexpr4Node2, tmultNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ADivExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TDiv tdivNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new ADivExpr4(pexpr4Node2, tdivNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AModExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TMod tmodNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AModExpr4(pexpr4Node2, tmodNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpr5Expr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new AExpr5Expr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANotExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        TNot tnotNode2;
        PExpr5 pexpr5Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpr5Node3 = (PExpr5)nodeArrayList2.get(0);

        pexpr5Node1 = new ANotExpr5(tnotNode2, pexpr5Node3);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AExpr6Expr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new AExpr6Expr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AParExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpr6Node1 = new AParExpr6(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANumberExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpr6Node1 = new ANumberExpr6(tnumberNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AVarExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpr6Node1 = new AVarExpr6(pvarNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ACallFunctionExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PCallFunction pcallfunctionNode2;
        pcallfunctionNode2 = (PCallFunction)nodeArrayList1.get(0);

        pexpr6Node1 = new ACallFunctionExpr6(pcallfunctionNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AReadExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpr6Node1 = new AReadExpr6(treadNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 5}, {23, REDUCE, 7}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 2}, {30, ACCEPT, -1}, },
			{{-1, REDUCE, 2}, {29, SHIFT, 7}, },
			{{-1, ERROR, 4}, {23, SHIFT, 10}, },
			{{-1, ERROR, 5}, {29, SHIFT, 11}, },
			{{-1, REDUCE, 9}, {28, SHIFT, 13}, },
			{{-1, ERROR, 7}, {9, SHIFT, 15}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, {29, SHIFT, 7}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 17}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 13}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 17}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, REDUCE, 9}, {28, SHIFT, 13}, },
			{{-1, ERROR, 19}, {10, SHIFT, 35}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 21}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 22}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 23}, {9, SHIFT, 38}, },
			{{-1, REDUCE, 11}, {9, SHIFT, 39}, {13, SHIFT, 17}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 27}, {14, SHIFT, 40}, {16, SHIFT, 41}, },
			{{-1, REDUCE, 40}, {15, SHIFT, 42}, },
			{{-1, REDUCE, 42}, {6, SHIFT, 43}, {7, SHIFT, 44}, },
			{{-1, REDUCE, 45}, {1, SHIFT, 45}, {2, SHIFT, 46}, },
			{{-1, REDUCE, 48}, {3, SHIFT, 47}, {4, SHIFT, 48}, {5, SHIFT, 49}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 5}, {23, REDUCE, 7}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 37}, {10, SHIFT, 51}, {16, SHIFT, 41}, },
			{{-1, ERROR, 38}, {10, SHIFT, 52}, },
			{{-1, REDUCE, 36}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 41}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 42}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 43}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 44}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 45}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 46}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 47}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 48}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 49}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 50}, {11, SHIFT, 64}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 53}, {10, SHIFT, 66}, },
			{{-1, REDUCE, 38}, {16, SHIFT, 41}, {28, SHIFT, 67}, },
			{{-1, REDUCE, 39}, {15, SHIFT, 42}, },
			{{-1, REDUCE, 41}, {6, SHIFT, 43}, {7, SHIFT, 44}, },
			{{-1, REDUCE, 43}, {1, SHIFT, 45}, {2, SHIFT, 46}, },
			{{-1, REDUCE, 44}, {1, SHIFT, 45}, {2, SHIFT, 46}, },
			{{-1, REDUCE, 46}, {3, SHIFT, 47}, {4, SHIFT, 48}, {5, SHIFT, 49}, },
			{{-1, REDUCE, 47}, {3, SHIFT, 47}, {4, SHIFT, 48}, {5, SHIFT, 49}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 15}, {11, SHIFT, 64}, {17, SHIFT, 69}, {20, SHIFT, 70}, {22, SHIFT, 71}, {24, SHIFT, 72}, {25, SHIFT, 73}, {29, SHIFT, 24}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 67}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 69}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 70}, {9, SHIFT, 88}, },
			{{-1, ERROR, 71}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 72}, {9, SHIFT, 90}, },
			{{-1, ERROR, 73}, {9, SHIFT, 91}, },
			{{-1, ERROR, 74}, {6, SHIFT, 92}, },
			{{-1, ERROR, 75}, {12, SHIFT, 93}, },
			{{-1, REDUCE, 15}, {11, SHIFT, 64}, {17, SHIFT, 69}, {20, SHIFT, 70}, {22, SHIFT, 71}, {24, SHIFT, 72}, {25, SHIFT, 73}, {29, SHIFT, 24}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 81}, {23, SHIFT, 95}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 38}, {16, SHIFT, 41}, {28, SHIFT, 67}, },
			{{-1, ERROR, 87}, {16, SHIFT, 41}, {18, SHIFT, 97}, },
			{{-1, ERROR, 88}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 89}, {16, SHIFT, 41}, {23, SHIFT, 99}, },
			{{-1, ERROR, 90}, {10, SHIFT, 100}, },
			{{-1, ERROR, 91}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, ERROR, 92}, {0, SHIFT, 20}, {8, SHIFT, 21}, {9, SHIFT, 22}, {24, SHIFT, 23}, {29, SHIFT, 24}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 97}, {11, SHIFT, 64}, },
			{{-1, ERROR, 98}, {10, SHIFT, 104}, {16, SHIFT, 41}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 100}, {23, SHIFT, 105}, },
			{{-1, ERROR, 101}, {10, SHIFT, 106}, {16, SHIFT, 41}, },
			{{-1, ERROR, 102}, {16, SHIFT, 41}, {23, SHIFT, 107}, },
			{{-1, REDUCE, 33}, {19, SHIFT, 108}, },
			{{-1, ERROR, 104}, {21, SHIFT, 110}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 106}, {23, SHIFT, 111}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 108}, {11, SHIFT, 64}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 110}, {11, SHIFT, 64}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {9, 16}, },
			{{-1, 9}, },
			{{-1, 3}, {35, 50}, },
			{{-1, 4}, {15, 19}, },
			{{-1, 14}, {18, 34}, },
			{{-1, 5}, },
			{{-1, 25}, {5, 12}, {64, 74}, {76, 74}, },
			{{-1, 6}, {13, 18}, },
			{{-1, 75}, {76, 94}, },
			{{-1, 76}, },
			{{-1, 77}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, 80}, },
			{{-1, 26}, {64, 81}, {76, 81}, },
			{{-1, 82}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 109}, },
			{{-1, 85}, {50, 65}, {97, 103}, {108, 112}, {110, 113}, },
			{{-1, 53}, },
			{{-1, 68}, {86, 96}, },
			{{-1, 27}, {22, 37}, {39, 54}, {67, 86}, {69, 87}, {71, 89}, {88, 98}, {91, 101}, {92, 102}, },
			{{-1, 28}, {41, 55}, },
			{{-1, 29}, {42, 56}, },
			{{-1, 30}, {43, 57}, {44, 58}, },
			{{-1, 31}, {45, 59}, {46, 60}, },
			{{-1, 32}, {21, 36}, {47, 61}, {48, 62}, {49, 63}, },
			{{-1, 33}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', 'entier', id, EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: id, EOF",
			"expecting: ';'",
			"expecting: ')', ';', ','",
			"expecting: '('",
			"expecting: '{', id, EOF",
			"expecting: ')', '[', ';', ','",
			"expecting: 'entier'",
			"expecting: ')', ';'",
			"expecting: ')', 'entier'",
			"expecting: number, '!', '(', 'lire', id",
			"expecting: ')'",
			"expecting: '+', '-', '*', '/', '%', '=', '<', ')', ']', '&', '|', 'alors', ';', ','",
			"expecting: '+', '-', '*', '/', '%', '=', '<', '(', ')', '[', ']', '&', '|', 'alors', ';', ','",
			"expecting: ']', '|'",
			"expecting: ')', ']', '&', '|', 'alors', ';', ','",
			"expecting: '=', '<', ')', ']', '&', '|', 'alors', ';', ','",
			"expecting: '+', '-', '=', '<', ')', ']', '&', '|', 'alors', ';', ','",
			"expecting: '{', ';', 'entier'",
			"expecting: ')', '|'",
			"expecting: number, '!', '(', ')', 'lire', id",
			"expecting: '{'",
			"expecting: ')', '|', ','",
			"expecting: '{', '}', 'si', 'tantque', 'retour', 'lire', 'ecrire', id",
			"expecting: '='",
			"expecting: '}'",
			"expecting: '|', 'alors'",
			"expecting: '|', ';'",
			"expecting: '{', '}', 'si', 'sinon', 'tantque', 'retour', 'lire', 'ecrire', id, EOF",
			"expecting: '{', '}', 'si', 'sinon', 'tantque', 'retour', 'lire', 'ecrire', id",
			"expecting: 'faire'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 6, 2, 3, 7, 8, 5, 9, 10, 11, 2, 12, 5, 13, 14, 12, 12, 6, 15, 14, 14, 16, 17, 18, 19, 14, 14, 14, 10, 20, 14, 21, 13, 22, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 23, 14, 14, 13, 24, 17, 18, 19, 19, 14, 14, 14, 14, 14, 25, 3, 14, 12, 13, 12, 6, 12, 6, 6, 26, 27, 25, 25, 25, 25, 25, 4, 25, 25, 25, 25, 24, 28, 12, 29, 13, 12, 12, 30, 27, 25, 13, 23, 21, 25, 4, 21, 29, 31, 32, 25, 4, 25, 23, 25, 23, 25, 25, 25, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
